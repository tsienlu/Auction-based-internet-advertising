/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.CustomerRole;

import Business.CustomerUsageHistory.CustomerUsage;
import Business.Enterprise.AdvertiserEnterprise;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Payment.Payment;
import Business.Purchase.MasterCustomerOrderCatalog;
import Business.Purchase.Order;
import Business.Purchase.OrderItem;
import Business.UserAccount.UserAccount;
import Ecosystem.AdvertiserProduct;
import Ecosystem.Customer;
import Ecosystem.EcoSystem;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author varsha
 */
public class ProductPurchaseJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private EcoSystem system;
    private AdvertiserEnterprise e;
    private UserAccount ua;
    private MasterCustomerOrderCatalog moc;
    private Order CustomerOrder;
    Boolean isCheckedOut = false;
    private Customer customer;
    private int a;
    private AdvertiserProduct adProduct;

    /**
     * Creates new form ProductPurchaseJPanel
     */
    public ProductPurchaseJPanel(JPanel userProcessContainer, EcoSystem system, AdvertiserEnterprise e, UserAccount ua) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.system = system;
        this.e = e;
        this.ua = ua;
        if(isCheckedOut==false) {
            CustomerOrder = new Order();
        }
        
        populateProductTable();
    }

    private void populateProductTable(){
        
        System.out.println(e.getName());
        DefaultTableModel dtm = (DefaultTableModel) tblProductTable.getModel();
        dtm.setRowCount(0);
        for(AdvertiserProduct ap:e.getAdProList()){
        Object row[] = new Object[4];
        row[0]=ap;
        row[1]=ap.getPrice();
        row[2]=ap.getAvail();
        row[3]=e.getName();
        dtm.addRow(row);
        }
    }

    private void populateOrderItemTable() {

        DefaultTableModel dtm = (DefaultTableModel) tblOrderTable.getModel();
        dtm.setRowCount(0);
        for (OrderItem oi : CustomerOrder.getOrderItemList()) {
            Object row[] = new Object[5];
            row[0] = oi;
            row[1] = oi.getQuantity();
            row[2] = oi.getProduct().getPrice();
            row[3] = oi.getQuantity() * oi.getProduct().getPrice();
            row[4] = oi.getAdEnt();

            dtm.addRow(row);

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblProductTable = new javax.swing.JTable();
        spnQuantitySpinner = new javax.swing.JSpinner();
        btnAddToCart = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblOrderTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        btnCheckOut = new javax.swing.JButton();
        viewJBtn = new javax.swing.JButton();
        backJBtn = new javax.swing.JButton();
        modQuantJTextField = new javax.swing.JTextField();
        modQuanJButton = new javax.swing.JButton();

        tblProductTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product Name", "Price", "Availability", "Supplier"
            }
        ));
        jScrollPane1.setViewportView(tblProductTable);

        btnAddToCart.setText("Add to Cart");
        btnAddToCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddToCartActionPerformed(evt);
            }
        });

        tblOrderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product Name", "Quantity", "Unit Price", "Total Price", "Supplier"
            }
        ));
        jScrollPane3.setViewportView(tblOrderTable);

        jLabel1.setText("Order Summary");

        btnCheckOut.setText("Check Out");
        btnCheckOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckOutActionPerformed(evt);
            }
        });

        viewJBtn.setText("View Summary");
        viewJBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewJBtnActionPerformed(evt);
            }
        });

        backJBtn.setText("<<  Back");
        backJBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJBtnActionPerformed(evt);
            }
        });

        modQuanJButton.setText("Modify Quantity");
        modQuanJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modQuanJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(315, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(modQuanJButton)
                    .addComponent(modQuantJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(167, 167, 167))
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(backJBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(23, 23, 23)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(btnCheckOut)
                                .addComponent(viewJBtn)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 415, Short.MAX_VALUE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(149, 149, 149)
                            .addComponent(btnAddToCart))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(163, 163, 163)
                            .addComponent(spnQuantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jLabel1))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(314, Short.MAX_VALUE)
                .addComponent(modQuantJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(modQuanJButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(backJBtn)
                .addGap(50, 50, 50))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addComponent(spnQuantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(btnAddToCart)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jLabel1)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addComponent(btnCheckOut)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(viewJBtn)
                    .addContainerGap(85, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddToCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddToCartActionPerformed
        // TODO add your handling code here:

        int selectedRow = tblProductTable.getSelectedRow();
        int quantity = (Integer) spnQuantitySpinner.getValue();

        if (selectedRow < 0) {
            JOptionPane.showConfirmDialog(null, "Please select a row");
            return;

        }
        
        AdvertiserProduct product = (AdvertiserProduct) tblProductTable.getValueAt(selectedRow, 0);
        if (quantity <= 0 || quantity > product.getAvail()) {
            JOptionPane.showConfirmDialog(null, "Please enter valid quantity");
            return;
        }
        Boolean isIncluded = false;
        for (Order or : e.getMasterCustomerOrderCatalog().getMasterOrderList()) {
            for (OrderItem oi : or.getOrderItemList()) {
                /*if ((oi.getProduct().getProdName().equals(product.getProdName()))
                        && (oi.getAdEnt().getName().equals(product.getProdName()))) {*/
                    
                    int oldQuantity = oi.getQuantity();
                    int newQuantity = (Integer) spnQuantitySpinner.getValue();
                    int availability = product.getAvail();
                    int total_Quantity = oldQuantity + newQuantity;
                    oi.setQuantity(total_Quantity);
                    int newAvailability = product.getAvail() - newQuantity;
                    product.setAvail(newAvailability);
                    isIncluded = true;

          //      }

            }

            if (!isIncluded) {
                System.out.println("not included");
                OrderItem oi = CustomerOrder.addOrderItem();
                oi.setProduct(product);
                oi.setAdEnt(e);
                int q = (Integer) spnQuantitySpinner.getValue();
                oi.setQuantity(q);
                int availability_new = product.getAvail() - q;
                product.setAvail(availability_new);
            }
            populateProductTable();
            populateOrderItemTable();
        }
    }//GEN-LAST:event_btnAddToCartActionPerformed

    private void btnCheckOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckOutActionPerformed
        // TODO add your handling code here:
        if (e instanceof AdvertiserEnterprise) {
            AdvertiserEnterprise ae = (AdvertiserEnterprise) e;
            for (Order o : ae.getMasterCustomerOrderCatalog().getMasterOrderList()) {

                if (o != null && o.getOrderItemList().size() > 0) {

                    for (OrderItem oi : o.getOrderItemList()) {
                        AdvertiserProduct ap = oi.getProduct();
                        for (AdvertiserProduct p : ae.getAdProList()) {
                            if (oi.getProduct().getProdId() == ap.getProdId()) {

                                int temp1 = oi.getQuantity();
                                int temp2 = p.getTotal_sold();
                                int temp3 = temp1 + temp2;
                                p.setTotal_sold(temp3);
                                break;
                            }
                        }
                    }
                    o.setCustomer((Customer) ua.getEmployee());
                    CustomerOrder = moc.addOrder(o);
                    customer.getMoc().addOrder(CustomerOrder);
                    for (OrderItem oi : CustomerOrder.getOrderItemList()) {
                        int amount = 0;
                        amount = amount + (oi.getProduct().getPrice()) * (oi.getQuantity());
                        Payment p = new Payment();
                        p.setOrderAmount(amount);
                        if (customer.getFinanceAccount().getBalance() >= p.getOrderAmount()) {
                            p.setStatus("Paid");
                            double oldBalance = ae.getFinanceAccount().getBalance();
                            ae.getFinanceAccount().setBalance(oldBalance - p.getOrderAmount());
                            JOptionPane.showMessageDialog(null, "You have successfully checked out");

                        } else {
                            p.setStatus("Denied");
                            customer.getMoc().removeOrder(CustomerOrder);

                        }
                    }
                    isCheckedOut = true;
                    CustomerOrder = new Order();
                    CustomerUsage cu = new CustomerUsage();
                    cu = customer.getCustomerUsageHistory().addCustomerUsage();

                    populateProductTable();
                    populateOrderItemTable();

                } else {

                    JOptionPane.showConfirmDialog(null, "Improper check out");
                }
            }

        }
    }//GEN-LAST:event_btnCheckOutActionPerformed

    private void viewJBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewJBtnActionPerformed
        // TODO add your handling code here:
        if (isCheckedOut == true) {
            OrderSummaryJPanel osp = new OrderSummaryJPanel(userProcessContainer, CustomerOrder);
            userProcessContainer.add("Order Summary", osp);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        } else {
            JOptionPane.showMessageDialog(null, "No CheckOut Made");
        }

    }//GEN-LAST:event_viewJBtnActionPerformed

    private void backJBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJBtnActionPerformed
        // TODO add your handling code here:
        if (e instanceof AdvertiserEnterprise) {

            AdvertiserEnterprise ae = (AdvertiserEnterprise) e;
            if (isCheckedOut == false) {
                for (OrderItem oi : CustomerOrder.getOrderItemList()) {

                    for (AdvertiserProduct p : ae.getAdProList()) {
                        if (p.getProdId() == oi.getProduct().getProdId()) {
                            int temp = p.getAvail() + oi.getQuantity();
                            p.setAvail(temp);
                            break;
                        }
                    }
                }
            }
            int result = JOptionPane.showConfirmDialog(null, "Clicking back without checking out. Your products will be lost.", "Warning!", JOptionPane.WARNING_MESSAGE);
            if (result == JOptionPane.OK_OPTION) {
                userProcessContainer.remove(this);
                CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                layout.previous(userProcessContainer);
            } else {
            }
        } else {

            userProcessContainer.remove(this);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.previous(userProcessContainer);

        }

    }//GEN-LAST:event_backJBtnActionPerformed

    private void modQuanJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modQuanJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblOrderTable.getSelectedRow();

        String reg = "[0-9]+";
        if (modQuantJTextField.getText().trim().length() == 0 || !(modQuantJTextField.getText().matches(reg))) {
            JOptionPane.showMessageDialog(null, "Invalid Quantity Value");
        } else if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row first.");
        } else if (Integer.parseInt(modQuantJTextField.getText()) <= 0) {
            JOptionPane.showMessageDialog(null, "Invalid Quantity Value");
        } else {
            try {
                OrderItem o = (OrderItem) tblOrderTable.getValueAt(selectedRow, 0);
                for (OrderItem oi : CustomerOrder.getOrderItemList()) {
                    if (oi.getProduct().getProdName().equals(o.getProduct().getProdName())) {
                        AdvertiserProduct p = oi.getProduct();
                        int oldQuantity = oi.getQuantity();
                        int newQuantity = Integer.parseInt(modQuantJTextField.getText());
                        if ((p.getAvail() + oldQuantity) < newQuantity) {
                            JOptionPane.showMessageDialog(null, "Invalid Quantity");
                        } else if (oldQuantity > newQuantity) {
                            int a = oldQuantity - newQuantity;
                            int availability = p.getAvail();
                            int total_Quantity = newQuantity;
                            oi.setQuantity(total_Quantity);
                            int newAvailability = p.getAvail() + a;
                            p.setAvail(newAvailability);

                        } else {
                            int a = newQuantity - oldQuantity;
                            int availability = p.getAvail();
                            int total_Quantity = newQuantity;
                            oi.setQuantity(total_Quantity);
                            int newAvailability = p.getAvail() - a;
                            p.setAvail(newAvailability);

                        }
                    }
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Invalid Quantity Value");
            }
        }
        populateProductTable();
        populateOrderItemTable();

    }//GEN-LAST:event_modQuanJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJBtn;
    private javax.swing.JButton btnAddToCart;
    private javax.swing.JButton btnCheckOut;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton modQuanJButton;
    private javax.swing.JTextField modQuantJTextField;
    private javax.swing.JSpinner spnQuantitySpinner;
    private javax.swing.JTable tblOrderTable;
    private javax.swing.JTable tblProductTable;
    private javax.swing.JButton viewJBtn;
    // End of variables declaration//GEN-END:variables
}
